/* File context, for rendering files on the share server. */

//
//     const context = useFrameContext();
//
// inside of any component being used inside of a CoCalc frame,
// and you get the project_id, path, and id of that particular
// frame, and probably more as we need it.

import React, {
  createContext,
  CSSProperties,
  useContext,
  ReactNode,
} from "react";

export interface IFileContext {
  // allow customizing anchor tags that get generated by various components, e.g., Markdown via slate.
  AnchorTagComponent?: React.FC<{
    href?: string;
    children?: ReactNode;
    title?: string;
    attributes?;
    id?;
    style?: CSSProperties;
  }>;

  // Allow customizing the header tags that get generated, e.g., this is used to add the linkable
  // headers in markdown in Jupyter notebooks (to match how Jupyter classic works).
  HeadingTagComponent?: React.FC<{
    level?: number;
    children?: ReactNode;
    attributes?;
    id?;
  }>;

  // data = the math string we're rendering, including the delims that gets us to math mode.
  // isMarkdown = true if we're in markdown, so less delims are allowed than in html.
  MathComponent?: React.FC<{ data: string; inMarkdown?: boolean }>;

  // If given, then when an anchor (A) tag is clicked
  // on, the given function is called.
  anchorTagAction?: (url: string) => void;
  anchorStyle?: CSSProperties;

  // If given, then all href and src attributes in all
  // tags are transformed by urlTransform, except anchor
  // tags if anchorTagAction is defined.  If it returns
  // undefined, they are unchanged; if it returns a string,
  // they are replaced by that.
  urlTransform?: (url: string, tag?: string) => string | undefined;

  noSanitize?: boolean;

  // If true, when rendering append a random query param after the source of any image
  // to force it to reload.  This is, e.g., useful for R markdown, where each time it
  // updates, the images may change, by their names don't, so we have to break the browser cache.
  reloadImages?: boolean;

  // If true, then the jupyter code execution
  jupyterApiEnabled?: boolean;

  // Disable markdown run button
  disableMarkdownCodebar?: boolean;

  // if true disable all extra buttons, e.g., "copy". This is used for printing.
  disableExtraButtons?: boolean;

  // If true, then at least one language model is enabled (this changes rarely, so not dynamic)
  hasLanguageModel?: boolean;

  project_id?: string;
  path?: string;

  // The webapp_client -- get this in the app, but not when rendered from nextjs, obviously.
  client?;

  is_visible?: boolean;

  // mermaid is only available in the app because it is ESM only and I can't load it into nextjs anymore.
  getMermaid?: () => Promise<any>;
}

export const FileContext = createContext<IFileContext>({});

export const useFileContext = () => {
  return useContext(FileContext);
};
