/*
THE SECRET TOKEN

There is a column secret_token in the postgresql projects table.  That token is
generated by the server and must be made available by the hub to the project at startup,
so the hubs can connect to the project.   It is also used internally to secure some
communications (e.g., sage worksheets).  The secret token must be written
to a file whose path is either $COCALC_SECRET_TOKEN *or* $DATA/secret-token.

For a compute server, hubs do not connect to it and shouldn't be able to;
instead compute servers connect to cocalc.  In that case the secret token
will always be set to a random value on startup, and used only for internal
communications.
*/

import { readFileSync } from "fs";
import { getLogger } from "./logger";
import { join } from "path";
import { data } from "@cocalc/backend/data";
import { compute_server_id } from "./data";
import { secureRandomStringSync } from "@cocalc/backend/misc";

const logger = getLogger("data");

// either this is set to something valid by the code below, or the process exits with an error.
export let secretToken: string = "";

function init() {
  if (compute_server_id || process.env.COCALC_TEST_MODE) {
    // it's a compute server or in test mode, so we always set secret token to a random value.
    secretToken = secureRandomStringSync(32);
    return;
  }
  // not a compute server -- read from file
  try {
    logger.debug(`COCALC_SECRET_TOKEN = ${process.env.COCALC_SECRET_TOKEN}`);
    const secretTokenPath =
      process.env.COCALC_SECRET_TOKEN ?? join(data, "secret-token");
    try {
      secretToken = readFileSync(secretTokenPath).toString();
    } catch (err) {
      throw Error(
        `Failed to read the project's secret token from '${secretTokenPath} -- ${err}.`,
      );
    }
    if (!secretToken || secretToken.length < 16) {
      throw Error(
        `secret token read from file ${secretTokenPath} must be defined and at least 16 characters, but secretToken?.length=${secretToken?.length}`,
      );
    }
    logger.debug("Successfully initialized project secret_token");
  } catch (err) {
    console.trace(err);
    const mesg = `The secret token must be in the path given by COCALC_SECRET_TOKEN or at '${join(data, "secret-token")}'.  There is something wrong with the setup of this project. ${err}.`;
    logger.debug(mesg);
    console.trace(mesg);
    setTimeout(() => {
      // give the process a chance to output the errors and logs above before actually terminating.
      process.exit(1);
    }, 2000);
  }
}

init();
